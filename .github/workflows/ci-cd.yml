name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - kubernetes  # Incluir aqui a branch que acionará o pipeline completo
  pull_request:
    branches:
      - master
      - kubernetes

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping --silent" --health-interval 10s --health-timeout 5s --health-retries 3
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
      
    - name: Wait for MySQL
      run: ./scripts/wait-for-it.sh localhost:3306 --timeout=30 --strict -- echo "MySQL is up"  

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        java-package: jdk
        distribution: temurin  # Escolha a distribuição desejada

    # Build services
    - name: Build Server Service
      run: mvn clean install --file ./server/pom.xml
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}

    - name: Build Gateway Service
      run: mvn clean install --file ./gateway/pom.xml
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}

    - name: Build Pedidos Service
      run: mvn clean install --file ./pedidos/pom.xml
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USER: ${{ secrets.DB_USER }}
        AMQP_HOST: ${{ secrets.AMQP_HOST }}
        AMQP_USER: ${{ secrets.AMQP_USER }}
        AMQP_PASSWORD: ${{ secrets.AMQP_PASSWORD }}

    - name: Build Pagamentos Service
      run: mvn clean install --file ./pagamentos/pom.xml
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USER: ${{ secrets.DB_USER }}
        AMQP_HOST: ${{ secrets.AMQP_HOST }}
        AMQP_USER: ${{ secrets.AMQP_USER }}
        AMQP_PASSWORD: ${{ secrets.AMQP_PASSWORD }}

    - name: Build Avaliacao Service
      run: mvn clean install --file ./avaliacao/pom.xml
      env:        
        AMQP_HOST: ${{ secrets.AMQP_HOST }}
        AMQP_USER: ${{ secrets.AMQP_USER }}
        AMQP_PASSWORD: ${{ secrets.AMQP_PASSWORD }}

    # Run Unit Tests
    #- name: Run Unit Tests for Server Service
     # run: mvn test --file ./server/pom.xml || true

    #- name: Run Unit Tests for Gateway Service
     # run: mvn test --file ./gateway/pom.xml || true

    #- name: Run Unit Tests for Pedidos Service
    #  run: mvn test --file ./pedidos/pom.xml || true

    #- name: Run Unit Tests for Pagamentos Service
     # run: mvn test --file ./pagamentos/pom.xml || true

   # - name: Run Unit Tests for Avaliacao Service
    #  run: mvn test --file ./avaliacao/pom.xml || true

    # Docker Login
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}        
      
    # Set up Docker Buildx (includes Docker Compose functionality)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2    

    # Build and Push Docker Images
    - name: Build and push Docker images  
      uses: docker/compose-action@v2  
      with:  
        compose-file: './docker-compose.yaml'  
        push: true  

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Deploy to Kubernetes only on the 'kubernetes' branch
      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/kubernetes'  # Condição para rodar apenas na branch 'kubernetes'
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          kubectl apply -f k8s/mysql.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/volumes.yaml
          kubectl apply -f k8s/services.yaml
          kubectl apply -f k8s/app.yaml
          kubectl apply -f k8s/loadbalancer.yaml
