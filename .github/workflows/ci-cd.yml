name: CI-CD Pipeline

on:
  push:
    branches:
      - master
      - kubernetes
  pull_request:
    branches:
      - main
      - kubernetes

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping --silent" --health-interval 10s --health-timeout 5s --health-retries 3
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          java-package: jdk
    	  distribution: temurin  # Escolha a distribuição desejada
          check-latest: false
          server-id: github
    	  server-username: ${{ github.actor }}  # Nome do usuário que executa a ação
    	  server-password: ${{ secrets.GITHUB_TOKEN }}  # Token gerado automaticamente
    	  overwrite-settings: true
    	  job-status: success

      - name: Build with Maven
        run: mvn clean install --file ./pom.xml

      - name: Run Unit Tests
        run: mvn test --file ./pom.xml

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Images
        run: |
          docker-compose -f docker-compose.yml build

      - name: Push Docker Images
        run: |
          docker-compose -f docker-compose.yml push

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          kubectl apply -f k8s/mysql.yaml && \
          kubectl apply -f k8s/secrets.yaml && \
          kubectl apply -f k8s/configmap.yaml && \
          kubectl apply -f k8s/volumes.yaml && \
          kubectl apply -f k8s/services.yaml && \
          kubectl apply -f k8s/app.yaml && \
          kubectl apply -f k8s/loadbalancer.yaml

